import { Request, Response, NextFunction } from 'express';
import { RequestValidationError } from '../errors/request-validation-error';
import { DatabaseConnectionError } from '../errors/database-connection-error';

export const errorHandler = (
  err: Error,
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  // Always send back a very identical consistently structured message because
  // I don't want engineers working on the React application to figure out
  // exactly how to handle all these 'n' different errors
  // @ Build one single identical structure for all possible errors across
  // all of the different services
  // console.log('Something went wrong.', err);

  /* @ Common Error Response Structure for all servers
   * {
   *    errors: {
   *      message: string,
   *      field?: string
   *    }[]
   * }
   * */
  if (err instanceof RequestValidationError) {
    // console.log('handling this error as a request validation error')
    /* const formattedErrors = err.errors.map(error => {
      return { message: error.msg, field: error.param }
    }) 
    return res.status(400).send({ errors: formattedErrors });
    */
    // breaking changes in v7 of express-validator library

    // @ Build list of formatted errors
    // This mapping statement generates that array of objects
    const formattedErrors = err.errors.map((error) => {
      if (error.type === 'field') {
        return { message: error.msg, field: error.path };
      }
    });

    // `formattedErrors` is now the array of objects
    // Now throw that into an object as a value for the errors property
    // to transform into common error response structure as architected
    return res.status(400).send({ errors: formattedErrors });
  }

  if (err instanceof DatabaseConnectionError) {
    // console.log('handling this error as a db connection error');

    // Transform into that same exact response structure as architected
    return res.status(500).send({ errors: [{ message: err.reason }] });
  }

  // Unknown error or generic error
  res.status(400).send({
    // message: 'Something went wrong',
    // message: err.message,
    errors: [{ message: 'Something went wrong' }],
  });
};
